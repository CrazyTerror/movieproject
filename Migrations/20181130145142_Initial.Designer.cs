// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieProject.Models;

namespace MovieProject.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20181130145142_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("MovieProject.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MovieProject.Models.FilmItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("Episode_EpisodeNumber");

                    b.Property<int?>("Episode_SeasonNumber");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OriginalLanguage");

                    b.Property<int?>("Rel_SeriesId");

                    b.Property<string>("Rel_SeriesName");

                    b.Property<DateTime?>("ReleaseDate");

                    b.Property<int?>("Runtime");

                    b.Property<int?>("Season_EpisodeCount");

                    b.Property<int?>("Season_SeasonNumber");

                    b.Property<string>("Slug");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<float?>("VoteAverage");

                    b.Property<int?>("VoteCount");

                    b.HasKey("Id");

                    b.ToTable("FilmItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FilmItem");
                });

            modelBuilder.Entity("MovieProject.Models.FilmItemCredits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Character");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<int>("PartType");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.HasIndex("PersonId");

                    b.ToTable("FilmItemCredits");
                });

            modelBuilder.Entity("MovieProject.Models.FilmItemGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<int>("GenreId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmItemGenres");
                });

            modelBuilder.Entity("MovieProject.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieProject.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MovieProject.Models.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("Deletable");

                    b.Property<string>("Description");

                    b.Property<int>("ItemCount");

                    b.Property<string>("Name");

                    b.Property<bool>("Privacy");

                    b.Property<string>("Slug");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("MovieProject.Models.ListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<int>("ListId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.HasIndex("ListId");

                    b.ToTable("ListItems");
                });

            modelBuilder.Entity("MovieProject.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Facebook");

                    b.Property<int?>("FilmItemId");

                    b.Property<string>("IMDB");

                    b.Property<string>("Instagram");

                    b.Property<string>("OfficialSite");

                    b.Property<int?>("PersonId");

                    b.Property<string>("TMDB");

                    b.Property<string>("Trakt");

                    b.Property<string>("Twitter");

                    b.Property<string>("Wikipedia");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.HasIndex("PersonId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("MovieProject.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Biography");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeathDate");

                    b.Property<string>("FirstName");

                    b.Property<int?>("Gender");

                    b.Property<string>("Slug");

                    b.Property<string>("Surname");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("MovieProject.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("FilmItemId");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("MovieProject.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<int?>("ShoutId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.HasIndex("ShoutId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("MovieProject.Models.Trivia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("FilmItemId");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.ToTable("Trivia");
                });

            modelBuilder.Entity("MovieProject.Models.UserRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<int>("Rating");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.ToTable("UserRatings");
                });

            modelBuilder.Entity("MovieProject.Models.UserWatchedFilmItemOn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FilmItemId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<DateTime>("WatchedOn");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.ToTable("UserWatching");
                });

            modelBuilder.Entity("MovieProject.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("FilmItemId");

                    b.Property<string>("Path");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FilmItemId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("MovieProject.Models.Episode", b =>
                {
                    b.HasBaseType("MovieProject.Models.FilmItem");

                    b.Property<int>("SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode");

                    b.HasDiscriminator().HasValue("Episode");
                });

            modelBuilder.Entity("MovieProject.Models.Movie", b =>
                {
                    b.HasBaseType("MovieProject.Models.FilmItem");

                    b.Property<int?>("Budget");

                    b.Property<int?>("Revenue");

                    b.ToTable("Movie");

                    b.HasDiscriminator().HasValue("Movie");
                });

            modelBuilder.Entity("MovieProject.Models.Season", b =>
                {
                    b.HasBaseType("MovieProject.Models.FilmItem");

                    b.Property<int>("SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Season");

                    b.HasDiscriminator().HasValue("Season");
                });

            modelBuilder.Entity("MovieProject.Models.Series", b =>
                {
                    b.HasBaseType("MovieProject.Models.FilmItem");

                    b.Property<DateTime?>("FirstAirDate");

                    b.Property<DateTime?>("LastAirDate");

                    b.Property<int?>("Series_EpisodeCount");

                    b.Property<int?>("Series_SeasonCount");

                    b.ToTable("Series");

                    b.HasDiscriminator().HasValue("Series");
                });

            modelBuilder.Entity("MovieProject.Models.FilmItemCredits", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("FilmItemCredits")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieProject.Models.Person", "Person")
                        .WithMany("FilmItemCredits")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.FilmItemGenre", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("FilmItemGenres")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieProject.Models.Genre", "Genre")
                        .WithMany("FilmItemGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.ListItem", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("ListItems")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieProject.Models.List", "List")
                        .WithMany("ListItems")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.Media", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("Media")
                        .HasForeignKey("FilmItemId");

                    b.HasOne("MovieProject.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("MovieProject.Models.Photo", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("Photos")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.Review", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("Reviews")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieProject.Models.Review", "Shout")
                        .WithMany()
                        .HasForeignKey("ShoutId");
                });

            modelBuilder.Entity("MovieProject.Models.Trivia", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("Trivia")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.UserRating", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("UserRatings")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.UserWatchedFilmItemOn", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany()
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.Video", b =>
                {
                    b.HasOne("MovieProject.Models.FilmItem", "FilmItem")
                        .WithMany("Videos")
                        .HasForeignKey("FilmItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.Episode", b =>
                {
                    b.HasOne("MovieProject.Models.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieProject.Models.Season", b =>
                {
                    b.HasOne("MovieProject.Models.Series", "Series")
                        .WithMany("Seasons")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
